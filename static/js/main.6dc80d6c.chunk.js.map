{"version":3,"sources":["Components/App/App.js","reportWebVitals.js","index.js"],"names":["App","props","handleColorChange","e","newColor","Math","random","currValue","target","id","state","color","includes","style","backgroundColor","setState","lastID","lastColor","handleDrag","event","dataTransfer","effectAllowed","stopPropagation","preventDefault","handleDragLeave","handleColorReset","isTRUE","handleCompleteReset","bind","handleResetColor","this","document","getElementById","circleArr","i","push","className","onDragLeave","onDragEnter","onClick","onDoubleClick","value","map","circle","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6dc80d6c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: [],\n      lastID: '',\n      lastColor: '',\n      isTRUE: true,\n    }\n    this.handleCompleteReset = this.handleCompleteReset.bind(this);\n    this.handleResetColor = this.handleResetColor.bind(this);\n    this.handleDrag = this.handleDrag.bind(this);\n    this.handleDragLeave = this.handleDragLeave.bind(this);\n  }\n  handleColorChange = (e) => {\n    let newColor = \"hsl(\" + Math.random() * 360 + \", 100%, 75%)\";\n    let currValue = e.target.id;\n    if(!this.state.color.includes(currValue)) {   \n      this.setState({\n        color: [...this.state.color, currValue],\n        lastID: currValue,\n        lastColor: newColor\n      })\n      e.target.style.backgroundColor = newColor;\n    } else {\n      e.target.style.backgroundColor = newColor;\n      this.setState({\n        lastID: currValue,\n        lastColor: newColor\n      })\n    }\n  }\n  handleDrag = (event) => {\n    if(this.state.lastColor !== '') {\n      event.target.style.backgroundColor = this.state.lastColor;\n    }\n    event.dataTransfer.effectAllowed = \"copyMove\";\n    event.stopPropagation();\n    event.preventDefault();\n  }\n  handleDragLeave = (event) => {\n    this.setState({\n      lastID: event.target.id\n    })\n    event.stopPropagation();\n    event.preventDefault();\n  }\n  handleColorReset = (event) => {\n     if(event.target.id === this.state.lastID) {\n        event.target.style.backgroundColor = null;\n        this.setState({\n          lastColor: '',\n        })\n     }\n     event.preventDefault();\n  }\n  handleCompleteReset(event) {\n    this.setState({\n      color:[],\n      lastID: '',\n      lastColor: '',\n      isTRUE: false\n    })\n    event.preventDefault();\n  }\n  componentDidUpdate() {\n    if(this.state.isTRUE === false) {\n      this.setState({\n        isTRUE: true\n      })\n    }\n  }\n  handleResetColor(event) {\n    if(this.state.lastID !== '') {\n      const lastCircle = document.getElementById(this.state.lastID);\n      lastCircle.style.backgroundColor = null;\n      this.setState({\n        lastID: ''\n      })\n    }\n    event.preventDefault();\n  }\n  render() {\n    let circleArr = [];\n    for(let i = 0; i < 741; i++) {\n        circleArr.push(\n            <div className='circle' \n            key={i}\n            id={i}\n            onDragLeave = {this.handleDragLeave}\n            onDragEnter = {this.handleDrag}\n            onClick={this.handleColorChange}\n            onDoubleClick={this.handleColorReset}\n            style={this.state.isTRUE === false ? {backgroundColor: null} : {} }>\n            </div>\n        )\n    }\n    return (\n      <div className='app'>\n        <div className='header'>\n          <h1 className='app-name'>Light-bright Colour Changing Circles</h1>\n          <div className='button-container'>\n            <button value={this.state.lastID} onClick={this.handleResetColor}>Reset Colour</button>\n            <button onClick={this.handleCompleteReset}>Reset All</button>\n          </div>\n        </div>\n        <div className='main-circle-container'>\n                {\n                    circleArr.map(circle => {\n                        return circle;\n                    })\n                }\n            </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}